name: Docker Build and Publish Test

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches: [master, develop]

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*
  pull_request:
    branches: [master, develop]
    tags:
      - v*

  # manually run a workflow
  workflow_dispatch:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: core-php-fpm-web-server

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --no-cache --build-arg APP_ENVIROMENT=production --file Dockerfile
          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  publish:
    # Ensure build job passes before pushing image.
    needs: build

    runs-on: ubuntu-latest
    if: (github.event_name == 'push' || github.event_name == 'pull_request') && github.base_ref == 'master'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --no-cache --build-arg APP_ENVIROMENT=production --file Dockerfile --tag $IMAGE_NAME

      - name: Log into GitHub Container Registry
      # TODO: Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
